{"ast":null,"code":"import data from \"../data.json\";\nfunction transform(date) {\n  return new Date(date).getTime();\n}\nfunction addWeeks(weeks) {\n  let date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n  date.setDate(date.getDate() + weeks * 7);\n  return date;\n}\nexport function mapDate() {}\nexport function checkAvailability(roomId, startTime, endTime) {\n  let filterRoom = data.filter(item => item.roomId === roomId);\n  for (let index = 0; index < filterRoom.length; index++) {\n    if (transform(filterRoom[index].startTime) <= transform(startTime) && transform(startTime) < transform(filterRoom[index].endTime)) {\n      return false;\n    } else if (transform(startTime) < transform(filterRoom[index].endTime) && transform(endTime) > transform(filterRoom[index].startTime)) {\n      return false;\n    }\n  }\n  return true;\n}\nexport function getBookingsForWeek(_ref) {\n  let {\n    now,\n    roomId,\n    weekNo\n  } = _ref;\n  let setNow = new Date(now);\n  let nowAddWeek = addWeeks(weekNo, new Date(now));\n  let filterRoom = data.filter(item => item.roomId === roomId && transform(item.startTime) > transform(setNow) && transform(item.startTime) < transform(nowAddWeek));\n  filterRoom.sort((a, b) => {\n    return new Date(a.startTime) - new Date(b.startTime);\n  });\n  let mapDate = [];\n  filterRoom.forEach(d => {\n    let lst = [];\n    let date = new Date(filterRoom[0].startTime).toDateString();\n    console.log(d.startTime, date, date !== new Date(d.startTime).toDateString(), lst);\n    if (date !== new Date(d.startTime).toDateString()) {\n      lst.push(d);\n      date = new Date(d.startTime).toDateString();\n    } else if (date === new Date(d.startTime).toDateString()) {\n      lst.push(d);\n    }\n  });\n  return mapDate;\n}\nexport function getBookingsForNextWeek(roomId) {\n  let now = new Date(\"2019-09-22\").setDate(new Date(\"2019-09-22\").getDate() + 7);\n  let nextWeek = new Date(\"2019-09-22\").setDate(new Date(\"2019-09-22\").getDate() + 7);\n  let nowAddWeek = addWeeks(1, new Date(nextWeek));\n  let filterRoom = data.filter(item => item.roomId === roomId && transform(item.startTime) > transform(now) && transform(item.startTime) < transform(nowAddWeek));\n  return filterRoom;\n}","map":{"version":3,"names":["data","transform","date","Date","getTime","addWeeks","weeks","arguments","length","undefined","setDate","getDate","mapDate","checkAvailability","roomId","startTime","endTime","filterRoom","filter","item","index","getBookingsForWeek","_ref","now","weekNo","setNow","nowAddWeek","sort","a","b","forEach","d","lst","toDateString","console","log","push","getBookingsForNextWeek","nextWeek"],"sources":["/Users/natthawut_sae/Documents/learning/forviz/src/util/index.js"],"sourcesContent":["import data from \"../data.json\";\nfunction transform(date) {\n  return new Date(date).getTime();\n}\n\nfunction addWeeks(weeks, date = new Date()) {\n  date.setDate(date.getDate() + weeks * 7);\n  return date;\n}\n\nexport function mapDate() {}\n\nexport function checkAvailability(roomId, startTime, endTime) {\n  let filterRoom = data.filter((item) => item.roomId === roomId);\n  for (let index = 0; index < filterRoom.length; index++) {\n    if (\n      transform(filterRoom[index].startTime) <= transform(startTime) &&\n      transform(startTime) < transform(filterRoom[index].endTime)\n    ) {\n      return false;\n    } else if (\n      transform(startTime) < transform(filterRoom[index].endTime) &&\n      transform(endTime) > transform(filterRoom[index].startTime)\n    ) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function getBookingsForWeek({ now, roomId, weekNo }) {\n  let setNow = new Date(now);\n  let nowAddWeek = addWeeks(weekNo, new Date(now));\n  let filterRoom = data.filter(\n    (item) =>\n      item.roomId === roomId &&\n      transform(item.startTime) > transform(setNow) &&\n      transform(item.startTime) < transform(nowAddWeek)\n  );\n\n  filterRoom.sort((a, b) => {\n    return new Date(a.startTime) - new Date(b.startTime);\n  });\n\n  let mapDate = [];\n\n  filterRoom.forEach((d) => {\n    let lst = [];\n    let date = new Date(filterRoom[0].startTime).toDateString();\n    console.log(\n      d.startTime,\n      date,\n      date !== new Date(d.startTime).toDateString(),\n      lst\n    );\n    if (date !== new Date(d.startTime).toDateString()) {\n      lst.push(d);\n      date = new Date(d.startTime).toDateString();\n    } else if (date === new Date(d.startTime).toDateString()) {\n      lst.push(d);\n    }\n  });\n  return mapDate;\n}\n\nexport function getBookingsForNextWeek(roomId) {\n  let now = new Date(\"2019-09-22\").setDate(\n    new Date(\"2019-09-22\").getDate() + 7\n  );\n  let nextWeek = new Date(\"2019-09-22\").setDate(\n    new Date(\"2019-09-22\").getDate() + 7\n  );\n  let nowAddWeek = addWeeks(1, new Date(nextWeek));\n\n  let filterRoom = data.filter(\n    (item) =>\n      item.roomId === roomId &&\n      transform(item.startTime) > transform(now) &&\n      transform(item.startTime) < transform(nowAddWeek)\n  );\n  return filterRoom;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}